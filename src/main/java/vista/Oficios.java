/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import controladores.ControladoraDocente;
import entidad.Docente;
import java.util.List;
import controladores.ControladoraProyecto;
import entidad.DocenteProyecto;
import entidad.Estudiante;
import entidad.Persona;
import entidad.Proyecto;
import java.util.HashSet;
import java.util.Set; 
import java.util.Calendar; 
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import java.io.File;
import java.awt.Desktop;
import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.Image;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Paragraph;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;


/**
 *
 * @author Francisco Perez
 */
public class Oficios extends javax.swing.JFrame {
    Adaptador a = new Adaptador();
    ControladoraDocente controlDocente = new ControladoraDocente();
    private ControladoraProyecto controladoraProyecto;

    /**
     * Creates new form Oficios
     */
    public Oficios() {
        initComponents();
        controladoraProyecto = new ControladoraProyecto();
        jComboTipo.setEnabled(false);
        inicializarFormulario();
    }
    
    private static final String TEXTO_INICIAL = 
    "Seleccione un docente, tipo de oficio y periodo.\n" +
    "Luego haga clic en 'Vista previa' para visualizar el contenido del oficio aquí.";
    private boolean cargandoDocentes = true;


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelPeriodo = new javax.swing.JLabel();
        jComboDocente = new javax.swing.JComboBox<>();
        jLabelTipo = new javax.swing.JLabel();
        jComboTipo = new javax.swing.JComboBox<>();
        jLabelDocente = new javax.swing.JLabel();
        jComboPeriodo = new javax.swing.JComboBox<>();
        jButonPrevia = new javax.swing.JButton();
        jButtonExportar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 0));
        jLabel1.setText("Generación de oficios para asesores y revisores.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(62, 62, 62))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(16, 16, 16))
        );

        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabelPeriodo.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabelPeriodo.setText("Periodo :");

        jComboDocente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboDocente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboDocenteActionPerformed(evt);
            }
        });

        jLabelTipo.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabelTipo.setText("Tipo de oficio :");

        jComboTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Asesor", "Revisor" }));

        jLabelDocente.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabelDocente.setText("Docente :");

        jComboPeriodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboPeriodoActionPerformed(evt);
            }
        });

        jButonPrevia.setBackground(new java.awt.Color(255, 51, 0));
        jButonPrevia.setFont(new java.awt.Font("Roboto Black", 0, 14)); // NOI18N
        jButonPrevia.setForeground(new java.awt.Color(255, 255, 255));
        jButonPrevia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/VisPrev.png"))); // NOI18N
        jButonPrevia.setText("Vista previa");
        jButonPrevia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButonPreviaActionPerformed(evt);
            }
        });

        jButtonExportar.setBackground(new java.awt.Color(255, 51, 0));
        jButtonExportar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jButtonExportar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonExportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Export.png"))); // NOI18N
        jButtonExportar.setText("Exportar oficio");
        jButtonExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportarActionPerformed(evt);
            }
        });

        jButtonCancelar.setBackground(new java.awt.Color(255, 0, 51));
        jButtonCancelar.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jButtonCancelar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelPeriodo)
                            .addComponent(jComboDocente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTipo)
                            .addComponent(jComboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDocente))
                        .addContainerGap(134, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButonPrevia)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonExportar)
                        .addGap(31, 31, 31))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabelDocente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboDocente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelTipo)
                        .addGap(18, 18, 18)
                        .addComponent(jComboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelPeriodo)
                        .addGap(18, 18, 18)
                        .addComponent(jComboPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCancelar)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButonPrevia)
                        .addComponent(jButtonExportar)))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        a.animarSalida(this);
        PanelPrincipal p = new PanelPrincipal();
        p.estadoFrame=false;
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButonPreviaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButonPreviaActionPerformed
    try {
        String docente = (String) jComboDocente.getSelectedItem();
        String tipo = (String) jComboTipo.getSelectedItem();
        String periodo = (String) jComboPeriodo.getSelectedItem();

        // 1. Validar docente
        if (docente == null || docente.startsWith("--") || docente.contains("No hay")) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un docente válido primero.");
            return;
        }

        // 2. Validar tipo
        if (tipo == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un tipo de oficio.");
            return;
        }

        // 3. Validar periodo
        if (periodo == null || periodo.startsWith("--")|| periodo.contains("Selecciona un periodo")) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un periodo válido.");
            return;
        }

        // 4. Filtrar proyectos
        List<Proyecto> proyectos = filtrarProyectos(docente, periodo, tipo);

        if (proyectos.isEmpty()) {
            jTextArea1.setText("No hay proyectos para este docente en el periodo seleccionado.");
            return;
        }

        // 5. Mostrar vista previa
        StringBuilder sb = new StringBuilder();
        sb.append("Oficio de ").append(tipo).append("\n");
        sb.append("Docente: ").append(docente).append("\nPeriodo: ").append(periodo).append("\n\n");

        if (tipo.equalsIgnoreCase("Asesor")) {
            for (Proyecto p : proyectos) {
                sb.append("Proyecto: ").append(p.getNombreProyecto())
                  .append(" - Estudiantes: ").append(obtenerEstudiantesFormateados(p))
                  .append("\n\n");
            }
        } else {
            sb.append("Proyectos donde participa como Revisor:\n");
            for (Proyecto p : proyectos) {
                sb.append("- ").append(p.getNombreProyecto())
                  .append(" - Estudiantes: ").append(obtenerEstudiantesFormateados(p))
                  .append("\n");
            }
        }

        jTextArea1.setText(sb.toString());

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Ocurrió un error al generar la vista previa: " + ex.getMessage());
    }
;
    }//GEN-LAST:event_jButonPreviaActionPerformed

    private void jButtonExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportarActionPerformed
    try {
        // 1. Validar selecciones
        String docente = (String) jComboDocente.getSelectedItem();
        String tipo = (String) jComboTipo.getSelectedItem();
        String periodo = (String) jComboPeriodo.getSelectedItem();
        if (docente == null || docente.startsWith("--")) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un docente válido primero.");
            return;
        }

        if (tipo == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un tipo de oficio.");
            return;
        }

        if (periodo == null || periodo.startsWith("Selecciona un periodo")|| periodo.contains("Selecciona un periodo")) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un periodo válido.");
            return;
        }

        // 2. Filtrar proyectos del docente, tipo y periodo
        List<Proyecto> proyectos = filtrarProyectos(docente, periodo, tipo);
        if (proyectos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay proyectos para exportar en este periodo.");
            return;
        }
        
        // 3. Lógica para generar los oficios
        if (tipo.equalsIgnoreCase("Asesor")) {
            // Generar un oficio por cada estudiante
            generarOficiosAsesor(proyectos, docente, periodo);
        } else {
            // Lógica para revisor (un solo oficio con todos los proyectos)
            generarOficioRevisor(proyectos, docente, periodo);
        }

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Ocurrió un error al exportar el oficio: " + ex.getMessage());
    }

;    }//GEN-LAST:event_jButtonExportarActionPerformed

    private void jComboDocenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboDocenteActionPerformed
    if (cargandoDocentes) return; // ← Salimos si aún está inicializando

    String docenteSeleccionado = (String) jComboDocente.getSelectedItem();

    if (docenteSeleccionado == null || docenteSeleccionado.startsWith("--") || docenteSeleccionado.contains("No hay")) {
        jComboTipo.removeAllItems();
        jComboTipo.setEnabled(false);
        return;
    }

    Set<String> roles = obtenerRolesDelDocente(docenteSeleccionado);

    jComboTipo.removeAllItems();

    if (roles.contains("Asesor")) {
        jComboTipo.addItem("Asesor");
    }
    if (roles.contains("Revisor")) {
        jComboTipo.addItem("Revisor");
    }

    if (roles.isEmpty()) {
        jComboTipo.setEnabled(false);
        JOptionPane.showMessageDialog(this, "El docente seleccionado no tiene roles de Asesor o Revisor.");
    } else {
        jComboTipo.setEnabled(true);
    }
;
    }//GEN-LAST:event_jComboDocenteActionPerformed

    private void jComboPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboPeriodoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboPeriodoActionPerformed
    
    private void inicializarFormulario() {
        jTextArea1.setText(TEXTO_INICIAL);
        jTextArea1.setEditable(false);

        jComboDocente.removeAllItems();
        cargandoDocentes = true;
        jComboDocente.removeAllItems();

        List<Docente> listaDocentes = controlDocente.listarDocentes();

        if (listaDocentes.isEmpty()) {
            jComboDocente.addItem("No hay docentes registrados");
        } else {
            jComboDocente.addItem("-- Selecciona un docente --"); 
            for (Docente d : listaDocentes) {
                String nombreCompleto = d.getIdPersona().getNombre() + " "
                                        + d.getIdPersona().getApellidoP() + " "
                                        + d.getIdPersona().getApellidoM();
                jComboDocente.addItem(nombreCompleto);
            }
        }
        jComboDocente.setEditable(false);
        cargandoDocentes = false;

        // Llenar jComboPeriodo con los años de los proyectos
        jComboPeriodo.removeAllItems(); // Limpiar ítems existentes
        Set<String> periodosValidos = new HashSet<>();

        // Obtener la lista de proyectos desde ControladoraProyecto
        List<Proyecto> listaProyectos = controladoraProyecto.listarProyectos();

        for (Proyecto proy : listaProyectos) {
            if (proy.getFechaRegistro() != null) {
                Calendar cal = Calendar.getInstance();
                cal.setTime(proy.getFechaRegistro());

                int year = cal.get(Calendar.YEAR);
                int mes = cal.get(Calendar.MONTH); // Enero=0, Diciembre=11

                String periodo;
                if (mes <= 6) { // Enero a Julio
                    periodo = "Enero-Junio " + year;
                } else { // Agosto a Diciembre
                    periodo = "Agosto-Diciembre " + year;
                }

                periodosValidos.add(periodo);
            }
        }

        // Si no hay proyectos, mostrar mensaje
        if (periodosValidos.isEmpty()) {
            jComboPeriodo.addItem("No hay proyectos registrados");
        } else {
            jComboPeriodo.addItem("  Selecciona un periodo  ");
            // Añadir periodos ordenados
            periodosValidos.stream()
                           .sorted() // Orden cronológico
                           .forEach(jComboPeriodo::addItem);
        }
        jComboPeriodo.setEditable(false);
        }
    private String obtenerNombreCompletoEstudiante(Estudiante estudiante) {
        if (estudiante == null || estudiante.getIdPersona() == null) {
            return "Estudiante no válido";
        }
        Persona per = estudiante.getIdPersona();
        return per.getNombre() + " " +
               (per.getApellidoP() != null ? per.getApellidoP() : "") + " " +
               (per.getApellidoM() != null && !per.getApellidoM().isEmpty() ? per.getApellidoM() : "");
    }
    
       private void generarOficiosAsesor(List<Proyecto> proyectos, String docente, String periodo) throws Exception {
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Guardar oficios en...");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int seleccion = chooser.showSaveDialog(this);

        if (seleccion != JFileChooser.APPROVE_OPTION) {
            return; // Usuario canceló
        }
        
        File directorio = chooser.getSelectedFile();
        
        for (Proyecto p : proyectos) {
            for (Estudiante est : p.getEstudianteCollection()) {
                String nombreEstudiante = obtenerNombreCompletoEstudiante(est);
                String filename = "Oficio_Asesor_" + nombreEstudiante.replace(" ", "_") + ".pdf";
                File archivo = new File(directorio, filename);
                
                Document doc = new Document();
                PdfWriter.getInstance(doc, new FileOutputStream(archivo));
                doc.open();
                
                // Generar el contenido del oficio para UN SOLO ESTUDIANTE
                agregarContenidoOficio(doc, docente, "Asesor", periodo, p, nombreEstudiante);
                
                doc.close();
            }
        }
        
        JOptionPane.showMessageDialog(this, "Oficios de Asesor exportados correctamente en:\n" + directorio.getAbsolutePath());
    }
           private void generarOficioRevisor(List<Proyecto> proyectos, String docente, String periodo) throws Exception {
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Guardar oficio como...");
        chooser.setSelectedFile(new File("Oficio_Revisor_" + docente + ".pdf"));

        int seleccion = chooser.showSaveDialog(this);
        if (seleccion != JFileChooser.APPROVE_OPTION) {
            return; // Usuario canceló
        }

        File archivo = chooser.getSelectedFile();
        Document doc = new Document();
        PdfWriter.getInstance(doc, new FileOutputStream(archivo));
        doc.open();
        
        // Agregar el contenido del oficio para Revisor (con todos los proyectos)
        agregarContenidoOficio(doc, docente, "Revisor", periodo, proyectos, null);
        
        doc.close();

        JOptionPane.showMessageDialog(this, "Oficio de Revisor exportado correctamente en:\n" + archivo.getAbsolutePath());
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().open(archivo);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "El PDF se guardó, pero no se pudo abrir automáticamente: " + ex.getMessage());
            }
        }
    }
              private void agregarContenidoOficio(Document doc, String docente, String tipo, String periodo, Object proyectos, String estudianteAsesor) throws Exception {
         // 1. Encabezado del documento
        PdfPTable encabezado = new PdfPTable(3); 
        encabezado.setWidthPercentage(100); 
        encabezado.setWidths(new float[]{1, 3, 1}); 

        Image imgIto = Image.getInstance(getClass().getResource("/Imagenes/itoo.png"));
        imgIto.scaleToFit(50, 50);
        PdfPCell cellIto = new PdfPCell(imgIto);
        cellIto.setBorder(Rectangle.NO_BORDER);
        cellIto.setHorizontalAlignment(Element.ALIGN_CENTER);
        encabezado.addCell(cellIto);

        String tituloTexto = tipo.equalsIgnoreCase("Asesor") 
                ? "OFICIO DE ASIGNACIÓN COMO ASESOR DE RESIDENCIA PROFESIONAL"
                : "OFICIO DE ASIGNACIÓN COMO REVISOR DE RESIDENCIA PROFESIONAL";
        Font fontTitulo = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD); 
        PdfPCell titulo = new PdfPCell(new Phrase(tituloTexto, fontTitulo)); 
        titulo.setHorizontalAlignment(Element.ALIGN_CENTER); 
        titulo.setVerticalAlignment(Element.ALIGN_MIDDLE);
        titulo.setBorder(Rectangle.NO_BORDER); 
        encabezado.addCell(titulo);

        Image imgTecnm = Image.getInstance(getClass().getResource("/Imagenes/tecnm.png")); 
        imgTecnm.scaleToFit(50, 50); 
        PdfPCell cellTecnm = new PdfPCell(imgTecnm);
        cellTecnm.setBorder(Rectangle.NO_BORDER);
        cellTecnm.setHorizontalAlignment(Element.ALIGN_CENTER);
        encabezado.addCell(cellTecnm);

        doc.add(encabezado);
        doc.add(new Paragraph("\n\n")); // Espacio después del encabezado

        // ** 2. Datos de Origen y Fecha **
        Font fontNormal = new Font(Font.FontFamily.HELVETICA, 10);
        Font fontBold = new Font(Font.FontFamily.HELVETICA, 10, Font.BOLD);
        Calendar calFecha = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("dd 'de' MMMM 'de' yyyy");
        String fechaOficio = "Heroica Ciudad de Oaxaca de Juárez, Oaxaca; a " + sdf.format(calFecha.getTime());
        Paragraph pFecha = new Paragraph(fechaOficio, fontNormal);
        pFecha.setAlignment(Element.ALIGN_RIGHT);
        doc.add(pFecha);
        doc.add(new Paragraph("\n"));

        // ** 3. Destinatario (Profesor) **
        Paragraph pDestinatario = new Paragraph();
        pDestinatario.add(new Phrase("C. " + docente + "\n", fontBold)); // Nombre del docente 
        pDestinatario.add(new Phrase("PRESENTE.- \n\n", fontNormal)); // Cargo o Presente
        pDestinatario.setAlignment(Element.ALIGN_LEFT);
        doc.add(pDestinatario);

        // ** 4. Asunto **
        Paragraph pAsunto = new Paragraph();
        String asuntoTexto = tipo.equalsIgnoreCase("Asesor")
                ? "ASUNTO: CARTA DE ASIGNACIÓN COMO ASESOR DE RESIDENCIA PROFESIONAL"
                : "ASUNTO: CARTA DE ASIGNACIÓN COMO REVISOR DE RESIDENCIA PROFESIONAL";
        pAsunto.add(new Phrase(asuntoTexto, fontBold));
        pAsunto.setAlignment(Element.ALIGN_CENTER);
        doc.add(pAsunto);
        doc.add(new Paragraph("\n"));

        // ** 5. Saludo Formal **
        Paragraph pSaludo = new Paragraph("Por medio del presente me dirijo a usted de la manera más atenta para hacer de su conocimiento su asignación como " + tipo.toLowerCase() + " de residencia profesional para el periodo " + periodo + ", en los proyectos que a continuación se enlistan:", fontNormal);
        pSaludo.setAlignment(Element.ALIGN_JUSTIFIED);
        doc.add(pSaludo);
        doc.add(new Paragraph("\n"));

        // ** 6. Cuerpo del Oficio: Listado de Proyectos y Estudiantes **
        if (tipo.equalsIgnoreCase("Asesor")) { 
            Proyecto p = (Proyecto) proyectos; // Solo un proyecto por documento
            Paragraph pProyecto = new Paragraph();
            pProyecto.add(new Phrase("  • Proyecto: ", fontBold));
            pProyecto.add(new Phrase(p.getNombreProyecto() + "\n", fontNormal)); 
            pProyecto.add(new Phrase("    Estudiante: ", fontBold));
            pProyecto.add(new Phrase(estudianteAsesor + "\n\n", fontNormal)); 
            doc.add(pProyecto);
        } else { // Revisor
            List<Proyecto> listaProyectos = (List<Proyecto>) proyectos;
            Paragraph pRevisorIntro = new Paragraph("Proyectos donde participa como Revisor:", fontNormal);
            pRevisorIntro.add(new Paragraph("\n"));
            doc.add(pRevisorIntro);
            for (Proyecto p : listaProyectos) { 
                Paragraph pProyectoRevisor = new Paragraph();
                pProyectoRevisor.add(new Phrase("  • " + p.getNombreProyecto() + " - Estudiantes: " + obtenerEstudiantesFormateados(p) + "\n", fontNormal)); 
                doc.add(pProyectoRevisor);
            }
            doc.add(new Paragraph("\n"));
        }

        // ** 7. Cierre Formal **
        Paragraph pCierre = new Paragraph("Sin otro particular por el momento, agradezco su atención y le envío un cordial saludo.", fontNormal);
        pCierre.setAlignment(Element.ALIGN_JUSTIFIED);
        doc.add(pCierre);
        doc.add(new Paragraph("\n\n"));

        // ** 8. Atentamente y Firma del Jefe de Departamento **
        Paragraph pAtentamente = new Paragraph("ATENTAMENTE\n", fontBold);
        pAtentamente.setAlignment(Element.ALIGN_CENTER);
        doc.add(pAtentamente);
        doc.add(new Paragraph("\n\n\n")); // Espacio para la firma

        Paragraph pJefe = new Paragraph();
        pJefe.add(new Phrase("L.I. Velazquez Hernandez Maricarmen Montserrat\n", fontBold)); 
        pJefe.add(new Phrase("JEFA DEL DEPARTAMENTO DE VINCULACION\n", fontNormal)); 
        pJefe.setAlignment(Element.ALIGN_CENTER);
        doc.add(pJefe);
        doc.add(new Paragraph("\n"));

        // ** 9. Copias (Cc.p.) **
        Paragraph pCopias = new Paragraph("C.c.p. Expediente", fontNormal);
        pCopias.setAlignment(Element.ALIGN_LEFT);
        doc.add(pCopias);
    }
    
    private List<Proyecto> filtrarProyectos(String nombreDocente, String periodo, String tipo) {
    List<Proyecto> todos = controladoraProyecto.listarProyectos();
    List<Proyecto> filtrados = new ArrayList<>();

    // Determinar rango de fechas según periodo seleccionado
    String[] partes = periodo.split(" ");
    String semestre = partes[0]; // "Enero-Junio" o "Agosto-Diciembre"
    int year = Integer.parseInt(partes[1]);

    Calendar inicio = Calendar.getInstance();
    Calendar fin = Calendar.getInstance();

    if (semestre.equalsIgnoreCase("Enero-Junio")) {
        inicio.set(year, Calendar.JANUARY, 1);
        fin.set(year, Calendar.JULY, 31);
    } else {
        inicio.set(year, Calendar.AUGUST, 1);
        fin.set(year, Calendar.DECEMBER, 31);
    }

    for (Proyecto proy : todos) {
        if (proy.getFechaRegistro() == null) continue;

        Calendar fechaProy = Calendar.getInstance();
        fechaProy.setTime(proy.getFechaRegistro());

        // Validar si entra en rango
        if (fechaProy.after(inicio) && fechaProy.before(fin)) {
            // Buscar si el docente está en este proyecto con el rol correcto
            for (DocenteProyecto dp : proy.getDocenteProyectoCollection()) {
                Persona p = dp.getDocente().getIdPersona();
                String nombreCompleto = p.getNombre() + " " + p.getApellidoP() + " " + p.getApellidoM();

                if (nombreCompleto.equals(nombreDocente) &&
                    dp.getRolDocente().equalsIgnoreCase(tipo)) {
                    filtrados.add(proy);
                }
            }
        }
    }

    return filtrados;
}
    
    private Set<String> obtenerRolesDelDocente(String nombreDocente) {
    Set<String> roles = new HashSet<>();
    List<Proyecto> proyectos = controladoraProyecto.listarProyectos();

    for (Proyecto proy : proyectos) {
        for (DocenteProyecto dp : proy.getDocenteProyectoCollection()) {
            Persona p = dp.getDocente().getIdPersona();
            String nombreCompleto = p.getNombre() + " " + p.getApellidoP() + " " + p.getApellidoM();

            if (nombreCompleto.equals(nombreDocente)) {
                roles.add(dp.getRolDocente()); // Puede ser "Asesor" o "Revisor"
            }
        }
    }
    return roles;
}

    
    private String obtenerEstudiantesFormateados(Proyecto proyecto) {
    if (proyecto.getEstudianteCollection() == null || proyecto.getEstudianteCollection().isEmpty()) {
        return "Sin asignar";
    }

    StringBuilder nombresEstudiantes = new StringBuilder();
    for (Estudiante est : proyecto.getEstudianteCollection()) {
        Persona per = est.getIdPersona();
        if (per != null) {
            String nombreCompleto = per.getNombre() + " " +
                    (per.getApellidoP() != null ? per.getApellidoP() : "") + " " +
                    (per.getApellidoM() != null && !per.getApellidoM().isEmpty() ? per.getApellidoM() : "");
            nombresEstudiantes.append(nombreCompleto.trim()).append(", ");
        }
    }

    if (nombresEstudiantes.length() > 0) {
        nombresEstudiantes.setLength(nombresEstudiantes.length() - 2); // Quitar la última coma
    }
    return nombresEstudiantes.toString();
}


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Oficios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Oficios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Oficios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Oficios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Oficios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButonPrevia;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonExportar;
    private javax.swing.JComboBox<String> jComboDocente;
    private javax.swing.JComboBox<String> jComboPeriodo;
    private javax.swing.JComboBox<String> jComboTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDocente;
    private javax.swing.JLabel jLabelPeriodo;
    private javax.swing.JLabel jLabelTipo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
